{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"genbadge \u00b6 Generate badges for tools that do not provide one. genbadge provides a set of commandline utilities to generate badges for tools that do not provide one. It currently includes support for tests ( pytest or other junit.xml -generating framework), coverage and flake8 . Badges are either generated using the shields.io HTTP REST API, or with an equivalent local SVG template. Installing \u00b6 Full \u00b6 In order for all comandline features to work, you should install genbadge with the extra dependencies: > pip install genbadge [ all ] This is equivalent to pip install genbadge[tests,coverage,flake8] . Alternatively you can install dependencies for only a subset of commands for example pip install genbadge[tests,flake8] . Minimal \u00b6 genbadge core only requires click (the CLI framework), pillow (for SVG file templating) and requests (to call the shields.io API). You can install it using > pip install genbadge This will only allow you to use the low-level API . Usage \u00b6 Once installed, genbadge is available as a commandline utility. You can get some help with: > genbadge Usage: genbadge [ OPTIONS ] COMMAND [ ARGS ] ... Commandline utility to generate badges. To get help on each command use: genbadge <cmd> --help Options: --help Show this message and exit. Commands: tests Generate a badge for the test results ( e.g. from a junit.xml ) . 1. Tests badge \u00b6 Prerequisite: a test report \u00b6 a. pytest \u00b6 If you use pytest , you can use some options to generate test reports: with --junitxml=path/to/junit.xml a junit-format report is generated. This is the file that we'll need to generate the badge. with --html=path/to/report.html a detailed HTML report is generated. This is not required to generate the badge, but you might wish to use it so that users navigate to it when they will click on your badge. Security concerns Test reports might contain secrets (keys, env variables, OS user names containing employee numbers, etc.), so always review them carefully before publishing them ! Let's run this in your project: > pytest --junitxml = reports/junit/junit.xml --html = reports/junit/report.html You can check that the two files are correctly generated before moving forward. b. Other frameworks \u00b6 Any junit.xml input file would be accepted so other language users (e.g. java) can get this working for them as well. Generating the badge \u00b6 Now you can generate a badge similar to this one with the following command: > genbadge tests By default it assumes that the input file can be found at ./reports/junit/junit.xml . You can change this with the -i/--input-file flag. - can be used to denote <stdin> : e.g. genbadge tests -i - < junit.xml . the output file will be at ./tests-badge.svg . You can change it with the -o/--output-file flag the badge should be generated using shields.io (requires an internet connection). If you prefer you can use -l/--local to use the included SVG file template (less mature but seems to work) In addition to generating the badge, executing the command will also display some messages: Test statistics parsed successfully from '(...)/reports/junit/junit.xml' - Nb tests: Total ( 6 ) = Success ( 2 ) + Skipped ( 1 ) + Failed ( 2 ) + Errors ( 1 ) - Success percentage: 40 .00% ( 2 / 5 ) ( Skipped tests are excluded ) SUCCESS - Tests badge created: '(...)/tests-badge.svg' The resulting badge will by default look like this: [tests | 2/5] where 2 is the number of tests that have run successfully, and 5 is the total number of tests minus the number of skipped tests . The success percentage, defined as this ratio multiplied by 100, is displayed and can be further used to fail on threshold, see below . Finally, the color of the badge depends on the success percentage. Less than 50%: red less than 75%: orange less than 90%: green higher: bright green Using the badge \u00b6 To include the resulting badge in your documentation and make it point to the generated report.html , you can for example use the following markdown: [![Tests Status](./reports/junit/junit-badge.svg?dummy=8484744)](./reports/junit/report.html) It will render as follows: Note that the query part of the image url ?dummy=8484744 is a trick so that the github pages web server does not try to add an extra cache layer to the badge. Maybe this is not useful anymore with new versions of github, if you know the answer let me know ! Security concerns Test reports might contain secrets (keys, env variables, OS user names containing employee numbers, etc.), so always review them carefully before publishing them ! Failing on threshold \u00b6 You might wish the command to fail if the success percentage is not high enough. This may be done using the -t/--threshold flag: > genbadge tests -t 90 will fail and return an exit code of 1 if the success percentage is strictly lower than 90%. The success percentage is defined as the number of tests that have run successfully, divided by the total number of tests minus the number of skipped tests , times 100. So for 6 tests run, if 2 tests ran successfully and 1 was skipped then the success percentage is 2 / (6 - 1) * 100 which gives 40% . 2. Coverage badge \u00b6 TODO 3. Flake8 badge \u00b6 TODO 4. Low-level API \u00b6 You can create a badge with the Badge class. from genbadge import Badge b = Badge ( left_txt = \"foo\" , right_txt = \"bar\" , color = \"green\" ) print ( b ) yields [ foo | bar ] color: green By default no svg is generated: this is a purely abstract badge. You can make it a real badge with the following code: b . write_to ( \"tmp_badge.svg\" , use_shields = False ) Note the optional use_shields boolean flag that is used to switch between querying shields.io ( True , default) or using a local SVG file template ( False , but maybe less bullet-proof). See Also \u00b6 Other badge generation projects exist: coverage-badge , see in particular this discussion flake8-svg-badge that seems abandoned Others \u00b6 Do you like this library ? You might also like my other python libraries Want to contribute ? \u00b6 Details on the github page: https://github.com/smarie/python-genbadge","title":"Home"},{"location":"#genbadge","text":"Generate badges for tools that do not provide one. genbadge provides a set of commandline utilities to generate badges for tools that do not provide one. It currently includes support for tests ( pytest or other junit.xml -generating framework), coverage and flake8 . Badges are either generated using the shields.io HTTP REST API, or with an equivalent local SVG template.","title":"genbadge"},{"location":"#installing","text":"","title":"Installing"},{"location":"#full","text":"In order for all comandline features to work, you should install genbadge with the extra dependencies: > pip install genbadge [ all ] This is equivalent to pip install genbadge[tests,coverage,flake8] . Alternatively you can install dependencies for only a subset of commands for example pip install genbadge[tests,flake8] .","title":"Full"},{"location":"#minimal","text":"genbadge core only requires click (the CLI framework), pillow (for SVG file templating) and requests (to call the shields.io API). You can install it using > pip install genbadge This will only allow you to use the low-level API .","title":"Minimal"},{"location":"#usage","text":"Once installed, genbadge is available as a commandline utility. You can get some help with: > genbadge Usage: genbadge [ OPTIONS ] COMMAND [ ARGS ] ... Commandline utility to generate badges. To get help on each command use: genbadge <cmd> --help Options: --help Show this message and exit. Commands: tests Generate a badge for the test results ( e.g. from a junit.xml ) .","title":"Usage"},{"location":"#1-tests-badge","text":"","title":"1. Tests badge"},{"location":"#prerequisite-a-test-report","text":"","title":"Prerequisite: a test report"},{"location":"#a-pytest","text":"If you use pytest , you can use some options to generate test reports: with --junitxml=path/to/junit.xml a junit-format report is generated. This is the file that we'll need to generate the badge. with --html=path/to/report.html a detailed HTML report is generated. This is not required to generate the badge, but you might wish to use it so that users navigate to it when they will click on your badge. Security concerns Test reports might contain secrets (keys, env variables, OS user names containing employee numbers, etc.), so always review them carefully before publishing them ! Let's run this in your project: > pytest --junitxml = reports/junit/junit.xml --html = reports/junit/report.html You can check that the two files are correctly generated before moving forward.","title":"a. pytest"},{"location":"#b-other-frameworks","text":"Any junit.xml input file would be accepted so other language users (e.g. java) can get this working for them as well.","title":"b. Other frameworks"},{"location":"#generating-the-badge","text":"Now you can generate a badge similar to this one with the following command: > genbadge tests By default it assumes that the input file can be found at ./reports/junit/junit.xml . You can change this with the -i/--input-file flag. - can be used to denote <stdin> : e.g. genbadge tests -i - < junit.xml . the output file will be at ./tests-badge.svg . You can change it with the -o/--output-file flag the badge should be generated using shields.io (requires an internet connection). If you prefer you can use -l/--local to use the included SVG file template (less mature but seems to work) In addition to generating the badge, executing the command will also display some messages: Test statistics parsed successfully from '(...)/reports/junit/junit.xml' - Nb tests: Total ( 6 ) = Success ( 2 ) + Skipped ( 1 ) + Failed ( 2 ) + Errors ( 1 ) - Success percentage: 40 .00% ( 2 / 5 ) ( Skipped tests are excluded ) SUCCESS - Tests badge created: '(...)/tests-badge.svg' The resulting badge will by default look like this: [tests | 2/5] where 2 is the number of tests that have run successfully, and 5 is the total number of tests minus the number of skipped tests . The success percentage, defined as this ratio multiplied by 100, is displayed and can be further used to fail on threshold, see below . Finally, the color of the badge depends on the success percentage. Less than 50%: red less than 75%: orange less than 90%: green higher: bright green","title":"Generating the badge"},{"location":"#using-the-badge","text":"To include the resulting badge in your documentation and make it point to the generated report.html , you can for example use the following markdown: [![Tests Status](./reports/junit/junit-badge.svg?dummy=8484744)](./reports/junit/report.html) It will render as follows: Note that the query part of the image url ?dummy=8484744 is a trick so that the github pages web server does not try to add an extra cache layer to the badge. Maybe this is not useful anymore with new versions of github, if you know the answer let me know ! Security concerns Test reports might contain secrets (keys, env variables, OS user names containing employee numbers, etc.), so always review them carefully before publishing them !","title":"Using the badge"},{"location":"#failing-on-threshold","text":"You might wish the command to fail if the success percentage is not high enough. This may be done using the -t/--threshold flag: > genbadge tests -t 90 will fail and return an exit code of 1 if the success percentage is strictly lower than 90%. The success percentage is defined as the number of tests that have run successfully, divided by the total number of tests minus the number of skipped tests , times 100. So for 6 tests run, if 2 tests ran successfully and 1 was skipped then the success percentage is 2 / (6 - 1) * 100 which gives 40% .","title":"Failing on threshold"},{"location":"#2-coverage-badge","text":"TODO","title":"2. Coverage badge"},{"location":"#3-flake8-badge","text":"TODO","title":"3. Flake8 badge"},{"location":"#4-low-level-api","text":"You can create a badge with the Badge class. from genbadge import Badge b = Badge ( left_txt = \"foo\" , right_txt = \"bar\" , color = \"green\" ) print ( b ) yields [ foo | bar ] color: green By default no svg is generated: this is a purely abstract badge. You can make it a real badge with the following code: b . write_to ( \"tmp_badge.svg\" , use_shields = False ) Note the optional use_shields boolean flag that is used to switch between querying shields.io ( True , default) or using a local SVG file template ( False , but maybe less bullet-proof).","title":"4. Low-level API"},{"location":"#see-also","text":"Other badge generation projects exist: coverage-badge , see in particular this discussion flake8-svg-badge that seems abandoned","title":"See Also"},{"location":"#others","text":"Do you like this library ? You might also like my other python libraries","title":"Others"},{"location":"#want-to-contribute","text":"Details on the github page: https://github.com/smarie/python-genbadge","title":"Want to contribute ?"},{"location":"changelog/","text":"Changelog \u00b6 0.5.0 - First public version \u00b6 Command group genbadge with global help Command genbadge tests able to generate a badge from a junit.xml tests report, with color depending on success percentage (50%/75%/90%) customization of input junit.xml file and output SVG badge file, custom source ( shields.io by default or local SVG file template for offline usage). \"fail on threshold\" option to return an error code 1 when the success percentage is strictly lower than the threshold.","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#050-first-public-version","text":"Command group genbadge with global help Command genbadge tests able to generate a badge from a junit.xml tests report, with color depending on success percentage (50%/75%/90%) customization of input junit.xml file and output SVG badge file, custom source ( shields.io by default or local SVG file template for offline usage). \"fail on threshold\" option to return an error code 1 when the success percentage is strictly lower than the threshold.","title":"0.5.0 - First public version"},{"location":"long_description/","text":"python-genbadge \u00b6 Define fields in python classes. Easily. The documentation for users is available here: https://smarie.github.io/python-genbadge/ A readme for developers is available here: https://github.com/smarie/python-genbadge","title":"python-genbadge"},{"location":"long_description/#python-genbadge","text":"Define fields in python classes. Easily. The documentation for users is available here: https://smarie.github.io/python-genbadge/ A readme for developers is available here: https://github.com/smarie/python-genbadge","title":"python-genbadge"}]}