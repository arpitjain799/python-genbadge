{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"genbadge \u00b6 Generate badges for tools that do not provide one. genbadge provides a set of commandline utilities to generate badges for tools that do not provide one. It currently can create: tests badges such as from pytest or other junit.xml -generating framework, coverage badges such as from python coverage or other coverage.xml -generating framework, flake8 badges such as from flake8 --statistics . Badges are either generated using the shields.io HTTP REST API, or with an equivalent local SVG template included in genbadge . Installing \u00b6 Full \u00b6 In order for all commandline features to work, you should install genbadge with the extra dependencies: > pip install genbadge [ all ] This is equivalent to pip install genbadge[tests,coverage,flake8] . Alternatively you can install dependencies for only a subset of commands for example pip install genbadge[tests,flake8] . Minimal \u00b6 genbadge core only requires click (the CLI framework), pillow (for SVG file templating) and requests (to call the shields.io API). You can install it using > pip install genbadge This will only allow you to use the low-level API . Usage \u00b6 Once installed, genbadge is available as a commandline utility. You can get some help with: > genbadge Usage: genbadge [ OPTIONS ] COMMAND [ ARGS ] ... Commandline utility to generate badges. To get help on each command use: genbadge <cmd> --help Options: --help Show this message and exit. Commands: coverage Generate a badge for the coverage results ( e.g. from a coverage.xml ) . flake8 Generate a badge for the flake8 results ( e.g. from a flake8stats.txt file ) . tests Generate a badge for the test results ( e.g. from a junit.xml ) . 1. Tests badge \u00b6 Prerequisite: a test report \u00b6 a. pytest \u00b6 If you use pytest , you can use some options to generate test reports: with --junitxml=path/to/junit.xml a junit-format report is generated. This is the file that we'll need to generate the badge. with --html=path/to/report.html a detailed HTML report is generated. This is not required to generate the badge, but you might wish to use it so that users navigate to it when they will click on your badge. Security concerns Test reports might contain secrets (keys, env variables, OS user names containing employee numbers, etc.), so always review them carefully before publishing them ! Let's run this in your project: > pytest --junitxml = reports/junit/junit.xml --html = reports/junit/report.html You can check that the two files are correctly generated before moving forward. b. Other frameworks \u00b6 Any junit.xml input file would be accepted so other language users (e.g. java) can get this working for them as well. Generating the badge \u00b6 Now you can generate a badge similar to this one with the following command: > genbadge tests By default it assumes that the input file can be found at ./reports/junit/junit.xml . You can change this with the -i/--input-file flag. - can be used to denote <stdin> : e.g. genbadge tests -i - < junit.xml . the output file will be at ./tests-badge.svg . You can change it with the -o/--output-file flag - can be used to denote <stdout> : e.g. genbadge tests -o - > badge.svg . the badge should be generated using shields.io (requires an internet connection). If you prefer you can use -l/--local to use the included SVG file template (less mature but seems to work) In addition to generating the badge, executing the command will also display some details about the parsed file is you use the verbose -v flag: Test statistics parsed successfully from '(...)/reports/junit/junit.xml' - Nb tests: Total ( 6 ) = Success ( 2 ) + Skipped ( 1 ) + Failed ( 2 ) + Errors ( 1 ) - Success percentage: 40 .00% ( 2 / 5 ) ( Skipped tests are excluded ) SUCCESS - Tests badge created: '(...)/tests-badge.svg' Note that without the verbose flag, only the last line of this message is displayed. You can disable it entirely using the silent flag -s . The resulting badge will by default look like this: [tests | 2/5] where 2 is the number of tests that have run successfully, and 5 is the total number of tests minus the number of skipped tests . When all tests pass with success, the badge simply shows the number of tests: [tests | 5] . The success percentage, defined as this ratio multiplied by 100, is displayed and can be further used to fail on threshold, see below . Finally, the color of the badge depends on the success percentage. Less than 50%: red less than 75%: orange less than 90%: green higher: bright green Using the badge \u00b6 To include the resulting badge in your documentation and make it point to the generated report.html , you can for example use the following markdown: [![Tests Status](./reports/junit/junit-badge.svg?dummy=8484744)](./reports/junit/report.html) It will render as follows: Note that the query part of the image url ?dummy=8484744 is a trick so that the github pages web server does not try to add an extra cache layer to the badge. Maybe this is not useful anymore with new versions of github, if you know the answer let me know ! Security concerns Test reports might contain secrets (keys, env variables, OS user names containing employee numbers, etc.), so always review them carefully before publishing them ! Failing on threshold \u00b6 You might wish the command to fail if the success percentage is not high enough. This may be done using the -t/--threshold flag: > genbadge tests -t 90 will fail and return an exit code of 1 if the success percentage is strictly lower than 90%. The success percentage is defined as the number of tests that have run successfully, divided by the total number of tests minus the number of skipped tests , times 100. So for 6 tests run, if 2 tests ran successfully and 1 was skipped then the success percentage is 2 / (6 - 1) * 100 which gives 40% . 2. Coverage badge \u00b6 Prerequisite: a cov report \u00b6 a. coverage \u00b6 If you use coverage , you can use some options to generate reports: with coverage report the coverage statistics are displayed in the console. This is not required but might be useful to debug if the xml generation fails. with coverage xml an XML-format report is generated. This is the file that we'll need to generate the badge. with coverage html a detailed HTML report (a folder) is generated. This is not required to generate the badge, but you might wish to use it so that users navigate to it when they will click on your badge. Let's run this in your project: > coverage report > coverage xml > coverage html You can check that the coverage file and html report folder are correctly generated before moving forward. b. Other frameworks \u00b6 Any coverage.xml input file would be accepted so other language users (e.g. java) can get this working for them as well. Generating the badge \u00b6 Now you can generate a badge similar to this one with the following command: > genbadge coverage By default it assumes that the input file can be found at ./reports/coverage/coverage.xml . You can change this with the -i/--input-file flag. - can be used to denote <stdin> : e.g. genbadge coverage -i - < coverage.xml . the output file will be at ./coverage-badge.svg . You can change it with the -o/--output-file flag - can be used to denote <stdout> : e.g. genbadge coverage -o - > badge.svg . the badge should be generated using shields.io (requires an internet connection). If you prefer you can use -l/--local to use the included SVG file template (less mature but seems to work) In addition to generating the badge, executing the command will also display some details about the parsed file is you use the verbose -v flag: Coverage results parsed successfully from '(...)/reports/coverage/coverage.xml' - Branch coverage: 5 .56% ( 1 /18 ) - Line coverage: 17 .81% ( 13 /73 ) - Total coverage: 15 .38% (( 1 +13 ) / ( 18 +73 )) SUCCESS - Coverage badge created: '(...)/coverage-badge.svg' Note that without the verbose flag, only the last line of this message is displayed. You can disable it entirely using the silent flag -s . The resulting badge will by default look like this: [coverage | 98.1%] where 98.1 is the total coverage, obtained from the branch and line coverages using the formula (nb_lines_covered + nb_branches_covered) / (nb_lines / nb_branches) and multiplying this by 100. Finally, the color of the badge depends on the success percentage. Less than 50%: red less than 75%: orange less than 90%: green higher: bright green Using the badge \u00b6 To include the resulting badge in your documentation and make it point to the generated HTML report, you can for example use the following markdown: [![Coverage Status](./reports/coverage/coverage-badge.svg?dummy=8484744)](./reports/coverage/index.html) It will render as follows: Note that the query part of the image url ?dummy=8484744 is a trick so that the github pages web server does not try to add an extra cache layer to the badge. Maybe this is not useful anymore with new versions of github, if you know the answer let me know ! 3. Flake8 badge \u00b6 Prerequisite: a flake8 report \u00b6 If you use flake8 , you can use some options to generate reports: with --statistics , the number of issues grouped by code (e.g. E201 ) is consolidated and printed to std out. You can redirect this to a file named flake8stats.txt using --tee --output-file flake8stats.txt . This is the file that we'll need to generate the badge. Note that --tee is to continue to see the report on the console, this is optional. with --format=html --htmldir a detailed HTML report (a folder) is generated. This is not required to generate the badge, but you might wish to use it so that users navigate to it when they will click on your badge. Let's run this in your project. We use --exit-zero so that the commands always returns with exit code 0 even if problems are found. > flake8 <src_folder> --exit-zero --format = html --htmldir ./reports/flake8 --statistics --tee --output-file flake8stats.txt 1 B014 Redundant exception types in ` except ( IOError, OSError ) : ` . Write ` except OSError: ` , which catches exactly the same exceptions. 7 C801 Copyright notice not present. 1 E122 continuation line missing indentation or outdented 1 E303 too many blank lines ( 3 ) ... You can check that the statistics file and html report folder are correctly generated before moving forward. Generating the badge \u00b6 Now you can generate a badge similar to this one with the following command: > genbadge flake8 By default it assumes that the input file can be found at ./reports/flake8/flake8stats.txt . You can change this with the -i/--input-file flag. - can be used to denote <stdin> : e.g. genbadge flake8 -i - < flake8stats.txt . the output file will be at ./flake8-badge.svg . You can change it with the -o/--output-file flag - can be used to denote <stdout> : e.g. genbadge flake8 -o - > badge.svg . the badge should be generated using shields.io (requires an internet connection). If you prefer you can use -l/--local to use the included SVG file template (less mature but seems to work) In addition to generating the badge, executing the command will also display some details about the parsed file is you use the verbose -v flag: Flake8 statistics parsed successfully from '(...)/reports/flake8/flake8stats.txt' - Total ( 20 ) = Critical ( 6 ) + Warning ( 9 ) + Info ( 5 ) SUCCESS - Flake8 badge created: '(...)/flake8-badge.svg' Note that without the verbose flag, only the last line of this message is displayed. You can disable it entirely using the silent flag -s . The resulting badge will by default look like this: [flake8 | 6 C, 0 W, 5 I] where 6, 0, 5 denote the number of critical issues, warnings, and information messages respectively. These severity levels are determined by the flake8-html plugin so as to match the colors in the HTML report. Finally, the color of the badge depends on the number of issues at each severity level. at least a critical issue (severity 1): red at least a warning (severity 2): orange at least an info (severity 3): green no issue at all: bright green Using the badge \u00b6 To include the resulting badge in your documentation and make it point to the generated HTML report, you can for example use the following markdown: [![Flake8 Status](./reports/flake8/flake8-badge.svg?dummy=8484744)](./reports/flake8/index.html) It will render as follows: Note that the query part of the image url ?dummy=8484744 is a trick so that the github pages web server does not try to add an extra cache layer to the badge. Maybe this is not useful anymore with new versions of github, if you know the answer let me know ! 4. Low-level API \u00b6 You can create a badge with the Badge class. from genbadge import Badge b = Badge ( left_txt = \"foo\" , right_txt = \"bar\" , color = \"green\" ) print ( b ) yields [ foo | bar ] color: green By default no svg is generated: this is a purely abstract badge. You can make it a real badge with the following code: b . write_to ( \"tmp_badge.svg\" , use_shields = False ) Note the optional use_shields boolean flag that is used to switch between querying shields.io ( True , default) or using a local SVG file template ( False , but maybe less bullet-proof). See Also \u00b6 Other badge generation projects exist: coverage-badge , see in particular this discussion flake8-svg-badge that seems abandoned ? Others \u00b6 Do you like this library ? You might also like my other python libraries Want to contribute ? \u00b6 Details on the github page: https://github.com/smarie/python-genbadge","title":"Home"},{"location":"index.html#genbadge","text":"Generate badges for tools that do not provide one. genbadge provides a set of commandline utilities to generate badges for tools that do not provide one. It currently can create: tests badges such as from pytest or other junit.xml -generating framework, coverage badges such as from python coverage or other coverage.xml -generating framework, flake8 badges such as from flake8 --statistics . Badges are either generated using the shields.io HTTP REST API, or with an equivalent local SVG template included in genbadge .","title":"genbadge"},{"location":"index.html#installing","text":"","title":"Installing"},{"location":"index.html#full","text":"In order for all commandline features to work, you should install genbadge with the extra dependencies: > pip install genbadge [ all ] This is equivalent to pip install genbadge[tests,coverage,flake8] . Alternatively you can install dependencies for only a subset of commands for example pip install genbadge[tests,flake8] .","title":"Full"},{"location":"index.html#minimal","text":"genbadge core only requires click (the CLI framework), pillow (for SVG file templating) and requests (to call the shields.io API). You can install it using > pip install genbadge This will only allow you to use the low-level API .","title":"Minimal"},{"location":"index.html#usage","text":"Once installed, genbadge is available as a commandline utility. You can get some help with: > genbadge Usage: genbadge [ OPTIONS ] COMMAND [ ARGS ] ... Commandline utility to generate badges. To get help on each command use: genbadge <cmd> --help Options: --help Show this message and exit. Commands: coverage Generate a badge for the coverage results ( e.g. from a coverage.xml ) . flake8 Generate a badge for the flake8 results ( e.g. from a flake8stats.txt file ) . tests Generate a badge for the test results ( e.g. from a junit.xml ) .","title":"Usage"},{"location":"index.html#1-tests-badge","text":"","title":"1. Tests badge"},{"location":"index.html#prerequisite-a-test-report","text":"","title":"Prerequisite: a test report"},{"location":"index.html#a-pytest","text":"If you use pytest , you can use some options to generate test reports: with --junitxml=path/to/junit.xml a junit-format report is generated. This is the file that we'll need to generate the badge. with --html=path/to/report.html a detailed HTML report is generated. This is not required to generate the badge, but you might wish to use it so that users navigate to it when they will click on your badge. Security concerns Test reports might contain secrets (keys, env variables, OS user names containing employee numbers, etc.), so always review them carefully before publishing them ! Let's run this in your project: > pytest --junitxml = reports/junit/junit.xml --html = reports/junit/report.html You can check that the two files are correctly generated before moving forward.","title":"a. pytest"},{"location":"index.html#b-other-frameworks","text":"Any junit.xml input file would be accepted so other language users (e.g. java) can get this working for them as well.","title":"b. Other frameworks"},{"location":"index.html#generating-the-badge","text":"Now you can generate a badge similar to this one with the following command: > genbadge tests By default it assumes that the input file can be found at ./reports/junit/junit.xml . You can change this with the -i/--input-file flag. - can be used to denote <stdin> : e.g. genbadge tests -i - < junit.xml . the output file will be at ./tests-badge.svg . You can change it with the -o/--output-file flag - can be used to denote <stdout> : e.g. genbadge tests -o - > badge.svg . the badge should be generated using shields.io (requires an internet connection). If you prefer you can use -l/--local to use the included SVG file template (less mature but seems to work) In addition to generating the badge, executing the command will also display some details about the parsed file is you use the verbose -v flag: Test statistics parsed successfully from '(...)/reports/junit/junit.xml' - Nb tests: Total ( 6 ) = Success ( 2 ) + Skipped ( 1 ) + Failed ( 2 ) + Errors ( 1 ) - Success percentage: 40 .00% ( 2 / 5 ) ( Skipped tests are excluded ) SUCCESS - Tests badge created: '(...)/tests-badge.svg' Note that without the verbose flag, only the last line of this message is displayed. You can disable it entirely using the silent flag -s . The resulting badge will by default look like this: [tests | 2/5] where 2 is the number of tests that have run successfully, and 5 is the total number of tests minus the number of skipped tests . When all tests pass with success, the badge simply shows the number of tests: [tests | 5] . The success percentage, defined as this ratio multiplied by 100, is displayed and can be further used to fail on threshold, see below . Finally, the color of the badge depends on the success percentage. Less than 50%: red less than 75%: orange less than 90%: green higher: bright green","title":"Generating the badge"},{"location":"index.html#using-the-badge","text":"To include the resulting badge in your documentation and make it point to the generated report.html , you can for example use the following markdown: [![Tests Status](./reports/junit/junit-badge.svg?dummy=8484744)](./reports/junit/report.html) It will render as follows: Note that the query part of the image url ?dummy=8484744 is a trick so that the github pages web server does not try to add an extra cache layer to the badge. Maybe this is not useful anymore with new versions of github, if you know the answer let me know ! Security concerns Test reports might contain secrets (keys, env variables, OS user names containing employee numbers, etc.), so always review them carefully before publishing them !","title":"Using the badge"},{"location":"index.html#failing-on-threshold","text":"You might wish the command to fail if the success percentage is not high enough. This may be done using the -t/--threshold flag: > genbadge tests -t 90 will fail and return an exit code of 1 if the success percentage is strictly lower than 90%. The success percentage is defined as the number of tests that have run successfully, divided by the total number of tests minus the number of skipped tests , times 100. So for 6 tests run, if 2 tests ran successfully and 1 was skipped then the success percentage is 2 / (6 - 1) * 100 which gives 40% .","title":"Failing on threshold"},{"location":"index.html#2-coverage-badge","text":"","title":"2. Coverage badge"},{"location":"index.html#prerequisite-a-cov-report","text":"","title":"Prerequisite: a cov report"},{"location":"index.html#a-coverage","text":"If you use coverage , you can use some options to generate reports: with coverage report the coverage statistics are displayed in the console. This is not required but might be useful to debug if the xml generation fails. with coverage xml an XML-format report is generated. This is the file that we'll need to generate the badge. with coverage html a detailed HTML report (a folder) is generated. This is not required to generate the badge, but you might wish to use it so that users navigate to it when they will click on your badge. Let's run this in your project: > coverage report > coverage xml > coverage html You can check that the coverage file and html report folder are correctly generated before moving forward.","title":"a. coverage"},{"location":"index.html#b-other-frameworks_1","text":"Any coverage.xml input file would be accepted so other language users (e.g. java) can get this working for them as well.","title":"b. Other frameworks"},{"location":"index.html#generating-the-badge_1","text":"Now you can generate a badge similar to this one with the following command: > genbadge coverage By default it assumes that the input file can be found at ./reports/coverage/coverage.xml . You can change this with the -i/--input-file flag. - can be used to denote <stdin> : e.g. genbadge coverage -i - < coverage.xml . the output file will be at ./coverage-badge.svg . You can change it with the -o/--output-file flag - can be used to denote <stdout> : e.g. genbadge coverage -o - > badge.svg . the badge should be generated using shields.io (requires an internet connection). If you prefer you can use -l/--local to use the included SVG file template (less mature but seems to work) In addition to generating the badge, executing the command will also display some details about the parsed file is you use the verbose -v flag: Coverage results parsed successfully from '(...)/reports/coverage/coverage.xml' - Branch coverage: 5 .56% ( 1 /18 ) - Line coverage: 17 .81% ( 13 /73 ) - Total coverage: 15 .38% (( 1 +13 ) / ( 18 +73 )) SUCCESS - Coverage badge created: '(...)/coverage-badge.svg' Note that without the verbose flag, only the last line of this message is displayed. You can disable it entirely using the silent flag -s . The resulting badge will by default look like this: [coverage | 98.1%] where 98.1 is the total coverage, obtained from the branch and line coverages using the formula (nb_lines_covered + nb_branches_covered) / (nb_lines / nb_branches) and multiplying this by 100. Finally, the color of the badge depends on the success percentage. Less than 50%: red less than 75%: orange less than 90%: green higher: bright green","title":"Generating the badge"},{"location":"index.html#using-the-badge_1","text":"To include the resulting badge in your documentation and make it point to the generated HTML report, you can for example use the following markdown: [![Coverage Status](./reports/coverage/coverage-badge.svg?dummy=8484744)](./reports/coverage/index.html) It will render as follows: Note that the query part of the image url ?dummy=8484744 is a trick so that the github pages web server does not try to add an extra cache layer to the badge. Maybe this is not useful anymore with new versions of github, if you know the answer let me know !","title":"Using the badge"},{"location":"index.html#3-flake8-badge","text":"","title":"3. Flake8 badge"},{"location":"index.html#prerequisite-a-flake8-report","text":"If you use flake8 , you can use some options to generate reports: with --statistics , the number of issues grouped by code (e.g. E201 ) is consolidated and printed to std out. You can redirect this to a file named flake8stats.txt using --tee --output-file flake8stats.txt . This is the file that we'll need to generate the badge. Note that --tee is to continue to see the report on the console, this is optional. with --format=html --htmldir a detailed HTML report (a folder) is generated. This is not required to generate the badge, but you might wish to use it so that users navigate to it when they will click on your badge. Let's run this in your project. We use --exit-zero so that the commands always returns with exit code 0 even if problems are found. > flake8 <src_folder> --exit-zero --format = html --htmldir ./reports/flake8 --statistics --tee --output-file flake8stats.txt 1 B014 Redundant exception types in ` except ( IOError, OSError ) : ` . Write ` except OSError: ` , which catches exactly the same exceptions. 7 C801 Copyright notice not present. 1 E122 continuation line missing indentation or outdented 1 E303 too many blank lines ( 3 ) ... You can check that the statistics file and html report folder are correctly generated before moving forward.","title":"Prerequisite: a flake8 report"},{"location":"index.html#generating-the-badge_2","text":"Now you can generate a badge similar to this one with the following command: > genbadge flake8 By default it assumes that the input file can be found at ./reports/flake8/flake8stats.txt . You can change this with the -i/--input-file flag. - can be used to denote <stdin> : e.g. genbadge flake8 -i - < flake8stats.txt . the output file will be at ./flake8-badge.svg . You can change it with the -o/--output-file flag - can be used to denote <stdout> : e.g. genbadge flake8 -o - > badge.svg . the badge should be generated using shields.io (requires an internet connection). If you prefer you can use -l/--local to use the included SVG file template (less mature but seems to work) In addition to generating the badge, executing the command will also display some details about the parsed file is you use the verbose -v flag: Flake8 statistics parsed successfully from '(...)/reports/flake8/flake8stats.txt' - Total ( 20 ) = Critical ( 6 ) + Warning ( 9 ) + Info ( 5 ) SUCCESS - Flake8 badge created: '(...)/flake8-badge.svg' Note that without the verbose flag, only the last line of this message is displayed. You can disable it entirely using the silent flag -s . The resulting badge will by default look like this: [flake8 | 6 C, 0 W, 5 I] where 6, 0, 5 denote the number of critical issues, warnings, and information messages respectively. These severity levels are determined by the flake8-html plugin so as to match the colors in the HTML report. Finally, the color of the badge depends on the number of issues at each severity level. at least a critical issue (severity 1): red at least a warning (severity 2): orange at least an info (severity 3): green no issue at all: bright green","title":"Generating the badge"},{"location":"index.html#using-the-badge_2","text":"To include the resulting badge in your documentation and make it point to the generated HTML report, you can for example use the following markdown: [![Flake8 Status](./reports/flake8/flake8-badge.svg?dummy=8484744)](./reports/flake8/index.html) It will render as follows: Note that the query part of the image url ?dummy=8484744 is a trick so that the github pages web server does not try to add an extra cache layer to the badge. Maybe this is not useful anymore with new versions of github, if you know the answer let me know !","title":"Using the badge"},{"location":"index.html#4-low-level-api","text":"You can create a badge with the Badge class. from genbadge import Badge b = Badge ( left_txt = \"foo\" , right_txt = \"bar\" , color = \"green\" ) print ( b ) yields [ foo | bar ] color: green By default no svg is generated: this is a purely abstract badge. You can make it a real badge with the following code: b . write_to ( \"tmp_badge.svg\" , use_shields = False ) Note the optional use_shields boolean flag that is used to switch between querying shields.io ( True , default) or using a local SVG file template ( False , but maybe less bullet-proof).","title":"4. Low-level API"},{"location":"index.html#see-also","text":"Other badge generation projects exist: coverage-badge , see in particular this discussion flake8-svg-badge that seems abandoned ?","title":"See Also"},{"location":"index.html#others","text":"Do you like this library ? You might also like my other python libraries","title":"Others"},{"location":"index.html#want-to-contribute","text":"Details on the github page: https://github.com/smarie/python-genbadge","title":"Want to contribute ?"},{"location":"changelog.html","text":"Changelog \u00b6 1.0.4 - Bugfix \u00b6 genbadge coverage : fixed ZeroDivisionError when coverage.xml contains 0 branches (in particular when --no-branch option is set). Fixes #15 1.0.3 - technical release \u00b6 setup.py is now using the contents of setup.cfg for download url and setuptools_scm. There is now a single configuration file. See setuptools_scm#582 . 1.0.2 - technical release \u00b6 Fixed the release message. 1.0.1 - bugfix - defusedxml import \u00b6 genbadge coverage command: fixed ImporError with defusedxml . Fixed #14 . 1.0.0 - security patch + simplified tests badge \u00b6 The tests badge now simplifies when the success rate is 100%, which is the case in the vast majority of projects. Fixes #12 Now using defusedxml to fix a known vulnerability . Fixes #11 0.8.0 - New features \u00b6 Added flake8 command. Fixes #3 . Added a \"silent\" flag -s . Fixes #10 Added a verbosity flag -v . Fixes #1 Python 3.9 is now officially supported. Fixes #9 0.7.1 - Bugfix \u00b6 Fixed bug with writing to stdout. Fixed #8 . 0.7.0 - Badges can be written to stdout \u00b6 Completed CLI help for subcommands. Fixes #5 Badges can now be redirected to stdout using genbadge <cmd> -o - . Fixes #4 0.6.0 - Added coverage command \u00b6 New command genbadge coverage able to generate a badge from a coverage.xml coverage report 0.5.0 - First public version \u00b6 Command group genbadge with global help Command genbadge tests able to generate a badge from a junit.xml tests report, with : color depending on success percentage (50%/75%/90%) customization of input junit.xml file and output SVG badge file, custom source ( shields.io by default or local SVG file template for offline usage). \"fail on threshold\" option to return an error code 1 when the success percentage is strictly lower than the threshold.","title":"Changelog"},{"location":"changelog.html#changelog","text":"","title":"Changelog"},{"location":"changelog.html#104-bugfix","text":"genbadge coverage : fixed ZeroDivisionError when coverage.xml contains 0 branches (in particular when --no-branch option is set). Fixes #15","title":"1.0.4 - Bugfix"},{"location":"changelog.html#103-technical-release","text":"setup.py is now using the contents of setup.cfg for download url and setuptools_scm. There is now a single configuration file. See setuptools_scm#582 .","title":"1.0.3 - technical release"},{"location":"changelog.html#102-technical-release","text":"Fixed the release message.","title":"1.0.2 - technical release"},{"location":"changelog.html#101-bugfix-defusedxml-import","text":"genbadge coverage command: fixed ImporError with defusedxml . Fixed #14 .","title":"1.0.1 - bugfix - defusedxml import"},{"location":"changelog.html#100-security-patch-simplified-tests-badge","text":"The tests badge now simplifies when the success rate is 100%, which is the case in the vast majority of projects. Fixes #12 Now using defusedxml to fix a known vulnerability . Fixes #11","title":"1.0.0 - security patch + simplified tests badge"},{"location":"changelog.html#080-new-features","text":"Added flake8 command. Fixes #3 . Added a \"silent\" flag -s . Fixes #10 Added a verbosity flag -v . Fixes #1 Python 3.9 is now officially supported. Fixes #9","title":"0.8.0 - New features"},{"location":"changelog.html#071-bugfix","text":"Fixed bug with writing to stdout. Fixed #8 .","title":"0.7.1 - Bugfix"},{"location":"changelog.html#070-badges-can-be-written-to-stdout","text":"Completed CLI help for subcommands. Fixes #5 Badges can now be redirected to stdout using genbadge <cmd> -o - . Fixes #4","title":"0.7.0 - Badges can be written to stdout"},{"location":"changelog.html#060-added-coverage-command","text":"New command genbadge coverage able to generate a badge from a coverage.xml coverage report","title":"0.6.0 - Added coverage command"},{"location":"changelog.html#050-first-public-version","text":"Command group genbadge with global help Command genbadge tests able to generate a badge from a junit.xml tests report, with : color depending on success percentage (50%/75%/90%) customization of input junit.xml file and output SVG badge file, custom source ( shields.io by default or local SVG file template for offline usage). \"fail on threshold\" option to return an error code 1 when the success percentage is strictly lower than the threshold.","title":"0.5.0 - First public version"},{"location":"long_description.html","text":"python-genbadge \u00b6 Define fields in python classes. Easily. The documentation for users is available here: https://smarie.github.io/python-genbadge/ A readme for developers is available here: https://github.com/smarie/python-genbadge","title":"python-genbadge"},{"location":"long_description.html#python-genbadge","text":"Define fields in python classes. Easily. The documentation for users is available here: https://smarie.github.io/python-genbadge/ A readme for developers is available here: https://github.com/smarie/python-genbadge","title":"python-genbadge"}]}